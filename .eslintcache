[{"D:\\React\\employee-payroll\\src\\index.js":"1","D:\\React\\employee-payroll\\src\\App.js":"2","D:\\React\\employee-payroll\\src\\reportWebVitals.js":"3","D:\\React\\employee-payroll\\src\\components\\employee-home\\employee-home.jsx":"4","D:\\React\\employee-payroll\\src\\components\\payroll-form\\payroll-form.jsx":"5","D:\\React\\employee-payroll\\src\\services\\employee-payroll-service.js":"6","D:\\React\\employee-payroll\\src\\components\\display\\display.jsx":"7","D:\\React\\employee-payroll\\src\\services\\axios-service.js":"8","D:\\React\\employee-payroll\\src\\config\\config.js":"9"},{"size":500,"mtime":1608296233445,"results":"10","hashOfConfig":"11"},{"size":788,"mtime":1608296233258,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1608296233681,"results":"13","hashOfConfig":"11"},{"size":2996,"mtime":1608296236457,"results":"14","hashOfConfig":"11"},{"size":16291,"mtime":1608296346336,"results":"15","hashOfConfig":"11"},{"size":651,"mtime":1608296237042,"results":"16","hashOfConfig":"11"},{"size":3093,"mtime":1608296236299,"results":"17","hashOfConfig":"11"},{"size":709,"mtime":1608296236939,"results":"18","hashOfConfig":"11"},{"size":58,"mtime":1608296236850,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"4u3ut6",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"D:\\React\\employee-payroll\\src\\index.js",[],["42","43"],"D:\\React\\employee-payroll\\src\\App.js",[],"D:\\React\\employee-payroll\\src\\reportWebVitals.js",[],"D:\\React\\employee-payroll\\src\\components\\employee-home\\employee-home.jsx",[],"D:\\React\\employee-payroll\\src\\components\\payroll-form\\payroll-form.jsx",["44","45"],"import React, { useState, useEffect } from 'react';\nimport profile1 from '../../assets/profile-images/Ellipse -1.png';\nimport profile2 from '../../assets/profile-images/Ellipse -3.png';\nimport profile3 from '../../assets/profile-images/Ellipse -7.png';\nimport profile4 from '../../assets/profile-images/Ellipse -8.png';\nimport './payroll-form.scss';\nimport EmployeeService from \"../../services/employee-payroll-service\";\nimport logo from '../../assets/images/logo.png'\nimport { useParams, Link, withRouter ,Redirect} from 'react-router-dom';\n\nconst PayrollForm = (props) => {\n    let initialValue = {\n        name: '',\n        profileArray: [\n            { url: '../../assets/profile-images/Ellipse -1.png' },\n            { url: '../../assets/profile-images/Ellipse -3.png' },\n            { url: '../../assets/profile-images/Ellipse -7.png' },\n            { url: '../../assets/profile-images/Ellipse -8.png' }\n\n        ],\n        allDepartment: [\n            'HR', 'Sales', 'Finance', 'Engineer', 'Others'\n        ],\n        departMentValue: [],\n        gender: '',\n        salary: '',\n        day: '1',\n        month: 'Jan',\n        year: '2020',\n        startDate: '',\n        notes: '',\n        id: '',\n        profileUrl: '',\n        isUpdate: false,\n        error: {\n            department: '',\n            name: '',\n            gender: '',\n            salary: '',\n            profileUrl: '',\n            startDate: ''\n        }\n    }\n    const [formValue, setForm] = useState(initialValue);\n    const employeeService = new EmployeeService();\n    const params = useParams();\n\n    useEffect(() => {\n        if (params.id) {\n          getDataById(params.id);\n        }\n      }, []);\n\n      const getDataById = (id) => {\n        employeeService\n          .getEmployee(id)\n          .then((data) => {\n            console.log(\"data is \", data.data);\n            let obj = data.data;\n            setData(obj);\n          })\n          .catch((err) => {\n            console.log(\"err is \", err);\n          });\n      };\n    //let _ = require('lodash');\n    //formValue.id = _.uniqueId();\n    \n    const setData = (obj) => {\n        let array = obj.startDate.split(\" \");\n        setForm({\n          ...formValue,\n          ...obj,\n          departMentValue: obj.departMent,\n          isUpdate: true,\n          day: array[0],\n          month: array[1],\n          year: array[2],\n        });\n      };\n\n    const changeValue = (event) => {\n        setForm({ ...formValue, [event.target.name]: event.target.value })\n        console.log(event.target.value)\n    }\n\n    const onCheckChange = (name) => {\n        let index = formValue.departMentValue.indexOf(name);\n       \n        let checkArray = [...formValue.departMentValue]\n        if (index > -1)\n            checkArray.splice(index, 1)\n        else\n            checkArray.push(name);\n        setForm({ ...formValue, departMentValue: checkArray });\n    }\n    const getChecked = (name) => {\n        return formValue.departMentValue && formValue.departMentValue.includes(name);\n    }\n\n    const handleValidations = async () => {\n        let isError = false;\n        let error = {\n            department: '',\n            name: '',\n            gender: '',\n            salary: '',\n            profileUrl: '',\n            startDate: ''\n        }\n        if (!formValue.name.match('^[A-Z]{1}[a-zA-Z]{2,}')) {\n            error.name = 'Name is Invalid!!'\n            isError = true;\n        }\n        if (formValue.gender.length < 1) {\n            error.gender = 'Gender is a required field'\n            isError = true;\n        }\n        \n        if ((formValue.salary.valueOf()<400000)||(formValue.salary.valueOf()>500000)) {\n            error.salary = 'Salary should be between 4,00,000 and 5,00,000!!'\n            isError = true;\n        }\n        if (formValue.profileUrl.length < 1) {\n            error.profileUrl = 'Profile is a required field'\n            isError = true;\n        }\n\n        if (formValue.departMentValue.length < 1) {\n            error.department = 'Department is a required field'\n            isError = true;\n        }\n        var day = formValue.day.valueOf();\n        var month = formValue.month.valueOf();\n        var year = formValue.year.valueOf();\n        var date = new Date(day+\" \"+month+\" \"+year);\n        var nowDate = Date.now();\n        if(date>nowDate){\n            error.startDate = \"StartDate is a future Date!!\"\n            isError = true;\n        }\n        if(formValue.notes.length < 1){\n            error.notes = \"Notes is a required field\"\n            isError = true;\n        }\n        await setForm({ ...formValue, error: error })\n        return isError;\n\n    }\n    const save = async (event) => {\n        event.preventDefault();\n     \n        if(await handleValidations()){\n            console.log(\"error\", formValue);\n            return;\n        }else{\n        let object = {\n            name: formValue.name,\n            departMent: formValue.departMentValue,\n            gender: formValue.gender,\n            salary: formValue.salary,\n            startDate: `${formValue.day} ${formValue.month} ${formValue.year}`,\n            notes: formValue.notes,\n            id: formValue.id,\n            profileUrl: formValue.profileUrl,\n          };\n          console.log(\"id\"+formValue.id);\n          if (formValue.isUpdate) {\n            employeeService\n              .updateEmployee(object)\n              .then((data) => {\n                  window.confirm(\"Data once modified cannot be restored!! Do you wish to continue?\");\n                  alert(\"Data updated successfully!\");\n                console.log(\"data after update\", data);\n                props.history.push(\"\");\n              })\n              .catch((error) => {\n                alert(\"WARNING!! Error updating the data!\");\n                console.log(\"Error after update\"+error);\n              });\n          } else {\n            employeeService\n              .addEmployee(object)\n              .then((data) => {\n                  alert(\"Data Added successfully!!\")\n                console.log(\"Employee payroll added\");\n                props.history.push(\"\");\n              })\n              .catch((err) => {\n                  alert(\"WARNING!! Error while adding the data!\");\n                console.log(\"error occured while adding employee\");\n              });\n          }\n        }\n          };\n  \n  \n    const reset = () => {\n        setForm({ ...initialValue, id: formValue.id, isUpdate: formValue.isUpdate });\n\n        console.log(formValue);\n    }\n    return (\n        <div className=\"payroll-main\">\n            <header className='header row center'>\n                <div className=\"logo\">\n                    <img src={logo} alt=\"\" />\n                    <div>\n                        <span className=\"emp-text\">EMPLOYEE</span> <br />\n                        <span className=\"emp-text emp-payroll\">PAYROLL</span>\n                    </div>\n                </div>\n            </header>\n            <div className=\"content\">\n                <form className=\"form\" action=\"#\" onSubmit={save}>\n                    <div className=\"form-head\">Employee Payroll form</div>\n                    <div className=\"row\">\n                        <label className=\"label text\" htmlFor=\"name\">Name</label>\n                        <input className=\"input\" type=\"text\" id=\"name\" name=\"name\" value={formValue.name} onChange={changeValue} placeholder=\"Your name..\" />\n                    <error className=\"error\">{formValue.error.name}</error>\n                    </div>\n                    <div className=\"row\">\n                        <label className=\"label text\" htmlFor=\"profileUrl\">Profile image</label>\n                        <div className=\"profile-radio-button\">\n                            <label >\n                                <input type=\"radio\" name=\"profileUrl\" checked={formValue.profileUrl === '../../assets/profile-images/Ellipse -1.png'} value=\"../../assets/profile-images/Ellipse -1.png\" onChange={changeValue} />\n                                <img className=\"profile\" src={profile1} alt=\"profile\" />\n                            </label>\n                            <label >\n                                <input type=\"radio\" name=\"profileUrl\" checked={formValue.profileUrl === '../../assets/profile-images/Ellipse -3.png'} value=\"../../assets/profile-images/Ellipse -3.png\" onChange={changeValue} />\n                                <img className=\"profile\" src={profile2} alt=\"profile\" />\n                            </label>\n                            <label >\n                                <input type=\"radio\" name=\"profileUrl\" checked={formValue.profileUrl === '../../assets/profile-images/Ellipse -7.png'} value=\"../../assets/profile-images/Ellipse -7.png\" onChange={changeValue} />\n                                <img className=\"profile\" src={profile3} alt=\"profile\" />\n                            </label>\n                            <label >\n                                <input type=\"radio\" name=\"profileUrl\" checked={formValue.profileUrl === '../../assets/profile-images/Ellipse -8.png'} value=\"../../assets/profile-images/Ellipse -8.png\" onChange={changeValue} />\n                                <img className=\"profile\" src={profile4} alt=\"profile\" />\n                            </label>\n\n                        </div>\n                        <error className=\"error\">{formValue.error.profileUrl}</error>\n                    </div>\n                    <div className=\"row\">\n                        <label className=\"label text\" htmlFor=\"gender\">Gender</label>\n                        <div>\n                            <input type=\"radio\" id=\"male\" checked={formValue.gender === 'male'} onChange={changeValue} name=\"gender\" value=\"male\" />\n                            <label className=\"text\" htmlFor=\"male\">Male</label>\n                            <input type=\"radio\" id=\"female\" checked={formValue.gender === 'female'} onChange={changeValue} name=\"gender\" value=\"female\" />\n                            <label className=\"text\" htmlFor=\"female\">Female</label>\n                        </div>\n                        <error className=\"error\">{formValue.error.gender}</error>\n                    </div>\n                    <div className=\"row\">\n                        <label className=\"label text\" htmlFor=\"department\">Department</label>\n                        <div>\n                            {formValue.allDepartment.map(item => (\n                                <span key={item}>\n                                    <input className=\"checkbox\" type=\"checkbox\" onChange={() => onCheckChange(item)} name={item}\n                                        checked={getChecked(item)} value={item} />\n                                    <label className=\"text\" htmlFor={item}>{item}</label>\n                                </span>\n                            ))}\n\n                        </div>\n                        <error className=\"error\">{formValue.error.department}</error>\n                    </div>\n                    \n                    <div className=\"row\">\n                        <label className=\"label text\" htmlFor=\"salary\">Salary</label>\n                        <input className=\"input\" type=\"text\" id=\"salary\" name=\"salary\" value={formValue.salary} onChange={changeValue} />\n                        <error className=\"error\">{formValue.error.salary}</error>\n                    </div>\n\n                    <div className=\"row\">\n                        <label className=\"label text\" htmlFor=\"startDate\">Start Date</label>\n                        <div>\n                            <select value={formValue.day} onChange={changeValue} id=\"day\" name=\"day\">\n                                <option value=\"1\">1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                                <option value=\"6\">6</option>\n                                <option value=\"7\">7</option>\n                                <option value=\"8\">8</option>\n                                <option value=\"9\">9</option>\n                                <option value=\"10\">10</option>\n                                <option value=\"11\">11</option>\n                                <option value=\"12\">12</option>\n                                <option value=\"13\">13</option>\n                                <option value=\"14\">14</option>\n                                <option value=\"15\">15</option>\n                                <option value=\"16\">16</option>\n                                <option value=\"17\">17</option>\n                                <option value=\"18\">18</option>\n                                <option value=\"19\">19</option>\n                                <option value=\"20\">20</option>\n                                <option value=\"21\">21</option>\n                                <option value=\"22\">22</option>\n                                <option value=\"23\">23</option>\n                                <option value=\"24\">24</option>\n                                <option value=\"25\">25</option>\n                                <option value=\"26\">26</option>\n                                <option value=\"27\">27</option>\n                                <option value=\"28\">28</option>\n                                <option value=\"29\">29</option>\n                                <option value=\"30\">30</option>\n                                <option value=\"31\">31</option>\n                            </select>\n                            <select value={formValue.month} onChange={changeValue} id=\"month\" name=\"month\">\n                                <option value=\"Jan\">January</option>\n                                <option value=\"Feb\">Febuary</option>\n                                <option value=\"March\">March</option>\n                                <option value=\"April\">April</option>\n                                <option value=\"May\">May</option>\n                                <option value=\"June\">June</option>\n                                <option value=\"July\">July</option>\n                                <option value=\"Aug\">August</option>\n                                <option value=\"Sept\">September</option>\n                                <option value=\"Oct\">October</option>\n                                <option value=\"Nov\">November</option>\n                                <option value=\"Dec\">December</option>\n                            </select>\n                            <select value={formValue.year} onChange={changeValue} id=\"year\" name=\"year\">\n                                <option value=\"2020\">2020</option>\n                                <option value=\"2019\">2019</option>\n                                <option value=\"2018\">2018</option>\n                                <option value=\"2017\">2017</option>\n                                <option value=\"2016\">2016</option>\n                            </select>\n                        </div>\n                        <error className=\"error\">{formValue.error.startDate}</error>\n                    </div>\n                    \n                    <div className=\"row\">\n                        <label className=\"label text\" htmlFor=\"notes\">Notes</label>\n                        <textarea onChange={changeValue} id=\"notes\" value={formValue.notes} className=\"input\" name=\"notes\" placeholder=\"\"\n                            style={{ height: '120%' }}></textarea>\n                    <error className=\"error\">{formValue.error.notes}</error>\n                    </div>\n\n                    <div className=\"buttonParent\">\n                        <Link to=\"\" className=\"resetButton button cancelButton\">Cancel</Link>\n\n                        <div className=\"submit-reset\">\n                            <button type=\"submit\" className=\"button submitButton\" id=\"submitButton\">{formValue.isUpdate ? 'Update' : 'Submit'}</button>\n                            <button type=\"button\" onClick={reset} className=\"resetButton button\">Reset</button>\n                        </div>\n                    </div >\n                </form >\n            </div >\n        </div >\n    )\n}\nexport default withRouter(PayrollForm);","D:\\React\\employee-payroll\\src\\services\\employee-payroll-service.js",[],"D:\\React\\employee-payroll\\src\\components\\display\\display.jsx",["46"],"import React from \"react\";\nimport \"./display.scss\";\nimport deleteIcon from \"../../assets/icons/delete-black-18dp.svg\";\nimport editIcon from \"../../assets/icons/create-black-18dp.svg\";\nimport profile1 from \"../../assets/profile-images/Ellipse -3.png\";\nimport profile2 from \"../../assets/profile-images/Ellipse -1.png\";\nimport profile3 from \"../../assets/profile-images/Ellipse -8.png\";\nimport profile4 from \"../../assets/profile-images/Ellipse -7.png\";\nimport { withRouter } from \"react-router-dom\";\nimport EmployeeService from \"../../services/employee-payroll-service\";\n\nconst Display = (props) => {\n  const employeeService = new EmployeeService();\n  const update = (employeeId) => {\n    props.history.push(`payroll-form/${employeeId}`);\n  };\n\n  return (\n    <table id=\"display\" className=\"display\">\n      <tbody>\n        <tr key={-1}>\n          <th>Profile Image</th>\n          <th>Name</th>\n          <th>Gender</th>\n          <th>Department</th>\n          <th>Salary</th>\n          <th>Start Date</th>\n          <th>Actions</th>\n        </tr>\n        {props.employeeArray &&\n          props.employeeArray.map((element, ind) => (\n            <tr key={ind}>\n              <td><img className=\"profile\" \n              src={\n                element.profileUrl ===\n                \"../../assets/profile-images/Ellipse -3.png\"\n                  ? profile1\n                  : element.profileUrl ===\n                    \"../../assets/profile-images/Ellipse -1.png\"\n                  ? profile2\n                  : element.profileUrl ===\n                    \"../../assets/profile-images/Ellipse -8.png\"\n                  ? profile3\n                  : profile4\n              }\n              alt=\"\"\n            />\n              </td>\n              <td>{element.name}</td>\n              <td className=\"gender\">{element.gender}</td>\n              <td>\n                {element.departMent &&\n                  element.departMent.map((dept) => (\n                    <div className=\"dept-label\">{dept}</div>\n                  ))}\n              </td>\n              <td> ₹ {element.salary}</td>\n              <td>{element.startDate}</td>\n              <td>\n                <img\n                  src={deleteIcon}\n                  alt=\"delete\"\n                />\n                <img\n                  onClick={() => update(element.id)}\n                  src={editIcon}\n                  alt=\"edit\"\n                />\n              </td>\n            </tr>\n          ))}\n      </tbody>\n    </table>\n  );\n};\nexport default withRouter(Display);","D:\\React\\employee-payroll\\src\\services\\axios-service.js",[],"D:\\React\\employee-payroll\\src\\config\\config.js",[],["47","48"],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":9,"column":39,"nodeType":"55","messageId":"56","endLine":9,"endColumn":47},{"ruleId":"57","severity":1,"message":"58","line":52,"column":10,"nodeType":"59","endLine":52,"endColumn":12,"suggestions":"60"},{"ruleId":"53","severity":1,"message":"61","line":13,"column":9,"nodeType":"55","messageId":"56","endLine":13,"endColumn":24},{"ruleId":"49","replacedBy":"62"},{"ruleId":"51","replacedBy":"63"},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getDataById' and 'params.id'. Either include them or remove the dependency array.","ArrayExpression",["66"],"'employeeService' is assigned a value but never used.",["64"],["65"],"no-global-assign","no-unsafe-negation",{"desc":"67","fix":"68"},"Update the dependencies array to be: [getDataById, params.id]",{"range":"69","text":"70"},[1681,1683],"[getDataById, params.id]"]