[{"D:\\React\\employee-payroll\\src\\index.js":"1","D:\\React\\employee-payroll\\src\\App.js":"2","D:\\React\\employee-payroll\\src\\reportWebVitals.js":"3","D:\\React\\employee-payroll\\src\\components\\payroll-form\\payroll-form.jsx":"4","D:\\React\\employee-payroll\\src\\services\\employee-payroll-service.js":"5","D:\\React\\employee-payroll\\src\\config\\config.js":"6"},{"size":500,"mtime":1608266227928,"results":"7","hashOfConfig":"8"},{"size":415,"mtime":1608266227865,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1608266227972,"results":"10","hashOfConfig":"8"},{"size":14771,"mtime":1608266534160,"results":"11","hashOfConfig":"8"},{"size":231,"mtime":1608266228505,"results":"12","hashOfConfig":"8"},{"size":58,"mtime":1608266228480,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"4u3ut6",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"D:\\React\\employee-payroll\\src\\index.js",[],["30","31"],"D:\\React\\employee-payroll\\src\\App.js",["32"],"import './App.css';\nimport PayrollForm from './components/payroll-form/payroll-form';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route, Redirect\n}from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path = \"\">\n            <PayrollForm/>\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;","D:\\React\\employee-payroll\\src\\reportWebVitals.js",[],"D:\\React\\employee-payroll\\src\\components\\payroll-form\\payroll-form.jsx",["33","34"],"import React, { useState, useEffect } from 'react';\nimport profile1 from '../../assets/profile-images/Ellipse -1.png';\nimport profile2 from '../../assets/profile-images/Ellipse -3.png';\nimport profile3 from '../../assets/profile-images/Ellipse -7.png';\nimport profile4 from '../../assets/profile-images/Ellipse -8.png';\nimport './payroll-form.scss';\nimport EmployeeService from \"../../services/employee-payroll-service\";\nimport logo from '../../assets/images/logo.png'\nimport { useParams, Link, withRouter } from 'react-router-dom';\n\nconst PayrollForm = (props) => {\n    let initialValue = {\n        name: '',\n        profileArray: [\n            { url: '../../assets/profile-images/Ellipse -1.png' },\n            { url: '../../assets/profile-images/Ellipse -3.png' },\n            { url: '../../assets/profile-images/Ellipse -7.png' },\n            { url: '../../assets/profile-images/Ellipse -8.png' }\n\n        ],\n        allDepartment: [\n            'HR', 'Sales', 'Finance', 'Engineer', 'Others'\n        ],\n        departMentValue: [],\n        gender: '',\n        salary: '',\n        day: '1',\n        month: 'Jan',\n        year: '2020',\n        startDate: '',\n        notes: '',\n        id: '',\n        profileUrl: '',\n        isUpdate: false,\n        error: {\n            department: '',\n            name: '',\n            gender: '',\n            salary: '',\n            profileUrl: '',\n            startDate: ''\n        }\n    }\n    const [formValue, setForm] = useState(initialValue);\n  \n    const employeeService = new EmployeeService();\n\n    let _ = require('lodash');\n    formValue.id = _.uniqueId();\n    \n    const changeValue = (event) => {\n        setForm({ ...formValue, [event.target.name]: event.target.value })\n        console.log(event.target.value)\n    }\n\n    const onCheckChange = (name) => {\n        let index = formValue.departMentValue.indexOf(name);\n       \n        let checkArray = [...formValue.departMentValue]\n        if (index > -1)\n            checkArray.splice(index, 1)\n        else\n            checkArray.push(name);\n        setForm({ ...formValue, departMentValue: checkArray });\n    }\n    const getChecked = (name) => {\n        return formValue.departMentValue && formValue.departMentValue.includes(name);\n    }\n\n    const handleValidations = async () => {\n        let isError = false;\n        let error = {\n            department: '',\n            name: '',\n            gender: '',\n            salary: '',\n            profileUrl: '',\n            startDate: ''\n        }\n        if (!formValue.name.match('^[A-Z]{1}[a-zA-Z]{2,}')) {\n            error.name = 'Name is Invalid!!'\n            isError = true;\n        }\n        if (formValue.gender.length < 1) {\n            error.gender = 'Gender is a required field'\n            isError = true;\n        }\n        \n        if ((formValue.salary.valueOf()<400000)||(formValue.salary.valueOf()>500000)) {\n            error.salary = 'Salary should be between 4,00,000 and 5,00,000!!'\n            isError = true;\n        }\n        if (formValue.profileUrl.length < 1) {\n            error.profileUrl = 'Profile is a required field'\n            isError = true;\n        }\n\n        if (formValue.departMentValue.length < 1) {\n            error.department = 'Department is a required field'\n            isError = true;\n        }\n        var day = formValue.day.valueOf();\n        var month = formValue.month.valueOf();\n        var year = formValue.year.valueOf();\n        var date = new Date(day+\" \"+month+\" \"+year);\n        var nowDate = Date.now();\n        if(date>nowDate){\n            error.startDate = \"StartDate is a future Date!!\"\n            isError = true;\n        }\n        if(formValue.notes.length < 1){\n            error.notes = \"Notes is a required field\"\n            isError = true;\n        }\n        await setForm({ ...formValue, error: error })\n        return isError;\n\n    }\n    const save = async (event) => {\n        event.preventDefault();\n     \n        if(await handleValidations()){\n            console.log(\"error\", formValue);\n            return;\n        }else{\n        let object = {\n            name: formValue.name,\n            departMent: formValue.departMentValue,\n            gender: formValue.gender,\n            salary: formValue.salary,\n            startDate: `${formValue.day} ${formValue.month} ${formValue.year}`,\n            notes: formValue.notes,\n            id: formValue.id,\n            profileUrl: formValue.profileUrl,\n          };\n          console.log(\"id\"+formValue.id);\n          employeeService.addEmployee(object)\n            .then((data) => {\n              alert(\"data added successfully\");\n              props.history.push(\"\");\n              window.location.reload();\n            })\n            .catch((err) => {\n              alert(\"error while Adding data\");\n            });\n        }\n          };\n  \n  \n    const reset = () => {\n        setForm({ ...initialValue, id: formValue.id, isUpdate: formValue.isUpdate });\n\n        console.log(formValue);\n    }\n    return (\n        <div className=\"payroll-main\">\n            <header className='header row center'>\n                <div className=\"logo\">\n                    <img src={logo} alt=\"\" />\n                    <div>\n                        <span className=\"emp-text\">EMPLOYEE</span> <br />\n                        <span className=\"emp-text emp-payroll\">PAYROLL</span>\n                    </div>\n                </div>\n            </header>\n            <div className=\"content\">\n                <form className=\"form\" action=\"#\" onSubmit={save}>\n                    <div className=\"form-head\">Employee Payroll form</div>\n                    <div className=\"row\">\n                        <label className=\"label text\" htmlFor=\"name\">Name</label>\n                        <input className=\"input\" type=\"text\" id=\"name\" name=\"name\" value={formValue.name} onChange={changeValue} placeholder=\"Your name..\" />\n                    <error className=\"error\">{formValue.error.name}</error>\n                    </div>\n                    <div className=\"row\">\n                        <label className=\"label text\" htmlFor=\"profileUrl\">Profile image</label>\n                        <div className=\"profile-radio-button\">\n                            <label >\n                                <input type=\"radio\" name=\"profileUrl\" checked={formValue.profileUrl === '../../assets/profile-images/Ellipse -1.png'} value=\"../../assets/profile-images/Ellipse -1.png\" onChange={changeValue} />\n                                <img className=\"profile\" src={profile1} alt=\"profile\" />\n                            </label>\n                            <label >\n                                <input type=\"radio\" name=\"profileUrl\" checked={formValue.profileUrl === '../../assets/profile-images/Ellipse -3.png'} value=\"../../assets/profile-images/Ellipse -3.png\" onChange={changeValue} />\n                                <img className=\"profile\" src={profile2} alt=\"profile\" />\n                            </label>\n                            <label >\n                                <input type=\"radio\" name=\"profileUrl\" checked={formValue.profileUrl === '../../assets/profile-images/Ellipse -7.png'} value=\"../../assets/profile-images/Ellipse -7.png\" onChange={changeValue} />\n                                <img className=\"profile\" src={profile3} alt=\"profile\" />\n                            </label>\n                            <label >\n                                <input type=\"radio\" name=\"profileUrl\" checked={formValue.profileUrl === '../../assets/profile-images/Ellipse -8.png'} value=\"../../assets/profile-images/Ellipse -8.png\" onChange={changeValue} />\n                                <img className=\"profile\" src={profile4} alt=\"profile\" />\n                            </label>\n\n                        </div>\n                        <error className=\"error\">{formValue.error.profileUrl}</error>\n                    </div>\n                    <div className=\"row\">\n                        <label className=\"label text\" htmlFor=\"gender\">Gender</label>\n                        <div>\n                            <input type=\"radio\" id=\"male\" checked={formValue.gender === 'male'} onChange={changeValue} name=\"gender\" value=\"male\" />\n                            <label className=\"text\" htmlFor=\"male\">Male</label>\n                            <input type=\"radio\" id=\"female\" checked={formValue.gender === 'female'} onChange={changeValue} name=\"gender\" value=\"female\" />\n                            <label className=\"text\" htmlFor=\"female\">Female</label>\n                        </div>\n                        <error className=\"error\">{formValue.error.gender}</error>\n                    </div>\n                    <div className=\"row\">\n                        <label className=\"label text\" htmlFor=\"department\">Department</label>\n                        <div>\n                            {formValue.allDepartment.map(item => (\n                                <span key={item}>\n                                    <input className=\"checkbox\" type=\"checkbox\" onChange={() => onCheckChange(item)} name={item}\n                                        checked={getChecked(item)} value={item} />\n                                    <label className=\"text\" htmlFor={item}>{item}</label>\n                                </span>\n                            ))}\n\n                        </div>\n                        <error className=\"error\">{formValue.error.department}</error>\n                    </div>\n                    \n                    <div className=\"row\">\n                        <label className=\"label text\" htmlFor=\"salary\">Salary</label>\n                        <input className=\"input\" type=\"text\" id=\"salary\" name=\"salary\" value={formValue.salary} onChange={changeValue} />\n                        <error className=\"error\">{formValue.error.salary}</error>\n                    </div>\n\n                    <div className=\"row\">\n                        <label className=\"label text\" htmlFor=\"startDate\">Start Date</label>\n                        <div>\n                            <select value={formValue.day} onChange={changeValue} id=\"day\" name=\"day\">\n                                <option value=\"1\">1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                                <option value=\"6\">6</option>\n                                <option value=\"7\">7</option>\n                                <option value=\"8\">8</option>\n                                <option value=\"9\">9</option>\n                                <option value=\"10\">10</option>\n                                <option value=\"11\">11</option>\n                                <option value=\"12\">12</option>\n                                <option value=\"13\">13</option>\n                                <option value=\"14\">14</option>\n                                <option value=\"15\">15</option>\n                                <option value=\"16\">16</option>\n                                <option value=\"17\">17</option>\n                                <option value=\"18\">18</option>\n                                <option value=\"19\">19</option>\n                                <option value=\"20\">20</option>\n                                <option value=\"21\">21</option>\n                                <option value=\"22\">22</option>\n                                <option value=\"23\">23</option>\n                                <option value=\"24\">24</option>\n                                <option value=\"25\">25</option>\n                                <option value=\"26\">26</option>\n                                <option value=\"27\">27</option>\n                                <option value=\"28\">28</option>\n                                <option value=\"29\">29</option>\n                                <option value=\"30\">30</option>\n                                <option value=\"31\">31</option>\n                            </select>\n                            <select value={formValue.month} onChange={changeValue} id=\"month\" name=\"month\">\n                                <option value=\"Jan\">January</option>\n                                <option value=\"Feb\">Febuary</option>\n                                <option value=\"March\">March</option>\n                                <option value=\"April\">April</option>\n                                <option value=\"May\">May</option>\n                                <option value=\"June\">June</option>\n                                <option value=\"July\">July</option>\n                                <option value=\"Aug\">August</option>\n                                <option value=\"Sept\">September</option>\n                                <option value=\"Oct\">October</option>\n                                <option value=\"Nov\">November</option>\n                                <option value=\"Dec\">December</option>\n                            </select>\n                            <select value={formValue.year} onChange={changeValue} id=\"year\" name=\"year\">\n                                <option value=\"2020\">2020</option>\n                                <option value=\"2019\">2019</option>\n                                <option value=\"2018\">2018</option>\n                                <option value=\"2017\">2017</option>\n                                <option value=\"2016\">2016</option>\n                            </select>\n                        </div>\n                        <error className=\"error\">{formValue.error.startDate}</error>\n                    </div>\n                    \n                    <div className=\"row\">\n                        <label className=\"label text\" htmlFor=\"notes\">Notes</label>\n                        <textarea onChange={changeValue} id=\"notes\" value={formValue.notes} className=\"input\" name=\"notes\" placeholder=\"\"\n                            style={{ height: '120%' }}></textarea>\n                    <error className=\"error\">{formValue.error.notes}</error>\n                    </div>\n\n                    <div className=\"buttonParent\">\n                        <Link to=\"\" className=\"resetButton button cancelButton\">Cancel</Link>\n\n                        <div className=\"submit-reset\">\n                            <button type=\"submit\" className=\"button submitButton\" id=\"submitButton\">{formValue.isUpdate ? 'Update' : 'Submit'}</button>\n                            <button type=\"button\" onClick={reset} className=\"resetButton button\">Reset</button>\n                        </div>\n                    </div >\n                </form >\n            </div >\n        </div >\n    )\n}\nexport default withRouter(PayrollForm);","D:\\React\\employee-payroll\\src\\services\\employee-payroll-service.js",[],"D:\\React\\employee-payroll\\src\\config\\config.js",[],["35","36"],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":6,"column":10,"nodeType":"43","messageId":"44","endLine":6,"endColumn":18},{"ruleId":"41","severity":1,"message":"45","line":1,"column":27,"nodeType":"43","messageId":"44","endLine":1,"endColumn":36},{"ruleId":"41","severity":1,"message":"46","line":9,"column":10,"nodeType":"43","messageId":"44","endLine":9,"endColumn":19},{"ruleId":"37","replacedBy":"47"},{"ruleId":"39","replacedBy":"48"},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useParams' is defined but never used.",["49"],["50"],"no-global-assign","no-unsafe-negation"]